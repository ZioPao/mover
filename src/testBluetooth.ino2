
//#define MASTER
#include "SerialTransfer.h"
#include "helper_3dmath.h"
#ifdef MASTER



SerialTransfer myTransfer;

struct STRUCT {
  char z;
  float y;
} testStruct;

char arr[6];


void setup()
{
  Serial.begin(115200);
  Serial1.begin(115200);
  myTransfer.begin(Serial1);
}


void loop()
{


  if(myTransfer.available())
  {
    // use this variable to keep track of how many
    // bytes we've processed from the receive buffer
    uint16_t recSize = 0;
    VectorInt16 test;
    recSize = myTransfer.rxObj(test, recSize);
    Serial.print(test.x);
    Serial.print(" | ");
    Serial.print(test.y);

    //recSize = myTransfer.rxObj(arr, recSize);
    //Serial.println(arr);
  }
  else{
      // Serial.println("Waiting for data");
  }
}
#else



SerialTransfer myTransfer;

struct STRUCT {
  char z;
  float y;
} testStruct;

char arr[] = "hello";

VectorInt16 t;
void setup()
{
  Serial.begin(115200);
  Serial1.begin(115200);
  myTransfer.begin(Serial1);

  testStruct.z = '$';
  testStruct.y = 4.5;
  t = VectorInt16(122, 212, 169);
}


void loop()
{
  // use this variable to keep track of how many
  // bytes we're stuffing in the transmit buffer
  uint16_t sendSize = 0;


  ///////////////////////////////////////// Stuff buffer with struct
  sendSize = myTransfer.txObj(t, sendSize);

  ///////////////////////////////////////// Stuff buffer with array
  //sendSize = myTransfer.txObj(arr, sendSize);
  Serial.print(sendSize);

  ///////////////////////////////////////// Send buffer
  myTransfer.sendData(sendSize);
  delay(500);
}


#endif