// I2C device class (I2Cdev) demonstration Arduino sketch for MPU6050 class
// 10/7/2011 by Jeff Rowberg <jeff@rowberg.net>
// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib
//
// Changelog:
//     2011-10-07 - initial release

/* ============================================
I2Cdev device library code is placed under the MIT license
Copyright (c) 2011 Jeff Rowberg
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#include "Wire.h"
#include "SPI.h"

// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"
#include "MPU6050.h"

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 accelgyro;

int16_t ax, ay, az;
int16_t gx, gy, gz;
int8_t threshold, count; 
float temp;
bool zero_detect; 
bool TurnOnZI = false;

bool XnegMD, XposMD, YnegMD, YposMD, ZnegMD, ZposMD;

#define LED_PIN 6
bool blinkState = false;

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    Wire.begin();
    Serial.begin(115200);
    accelgyro.initialize();
   
    accelgyro.setAccelerometerPowerOnDelay(3);
	

    accelgyro.setIntZeroMotionEnabled(TurnOnZI);
	

    accelgyro.setDHPFMode(1);

	
    accelgyro.setMotionDetectionThreshold(2);


    accelgyro.setZeroMotionDetectionThreshold(1);


    accelgyro.setMotionDetectionDuration(5);


    accelgyro.setZeroMotionDetectionDuration(1);	
	

    // configure Arduino LED for
    pinMode(LED_PIN, OUTPUT);
}

void loop() {
    // read raw accel/gyro measurements from device
    //Serial.println("Getting raw accwl/gyro measurements");
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    
    //Serial.println("Getting Motion indicators, count and threshold");
	
    XnegMD = accelgyro.getXNegMotionDetected();
    XposMD = accelgyro.getXPosMotionDetected();
    YnegMD = accelgyro.getYNegMotionDetected();
    YposMD = accelgyro.getYPosMotionDetected();
    ZnegMD = accelgyro.getZNegMotionDetected();
    ZposMD = accelgyro.getZPosMotionDetected();
	
    zero_detect = accelgyro.getIntMotionStatus();
    threshold = accelgyro.getZeroMotionDetectionThreshold();
    
    //Serial.println("Got to count");
    //count = accelgyro.getMotionDetectionCounterDecrement(); 
	
    /** Get current internal temperature.
    * @return Temperature reading in 16-bit 2's complement format
    * @see MPU60X0_RA_TEMP_OUT_H
    */
    //Serial.println("Getting Die Temperature");	
    temp=(accelgyro.getTemperature()/340.)+36.53;


    /*  The accelerometer and gyroscope measurements are explained in the MPU-6050 
    * datasheet in the GYRO_CONFIG and ACCEL_CONFIG register descriptions (sections 4.4 
    * and 4.5 on pages 14 and 15). The scale of each depends on the sensitivity settings 
    * chosen, which can be one of +/- 2, 4, 8, or 16g for the accelerometer and one of 
    * +/- 250, 500, 1000, or 2000 deg/sec for the gyroscope. The accelerometer produces data 
    * in units of acceleration (distance over time2), and the gyroscope produces data in units
    * of rotational velocity (rotation distance over time).
    * 
    * The output scale for any setting is [-32768, +32767] for each of the six axes. The default 
    * setting in the I2Cdevlib class is +/- 2g for the accel and +/- 250 deg/sec for the gyro. If 
    * the device is perfectly level and not moving, then:
    * 		X/Y accel axes should read 0
    * 		Z accel axis should read 1g, which is +16384 at a sensitivity of 2g
    * 		X/Y/Z gyro axes should read 0
    * 
    * In reality, the accel axes won't read exactly 0 since it is difficult to be perfectly level 
    * and there is some noise/error, and the gyros will also not read exactly 0 for the same reason
    * (noise/error).
    */
	
    // these methods (and a few others) are also available
    //accelgyro.getAcceleration(&ax, &ay, &az);
    //accelgyro.getRotation(&gx, &gy, &gz);
    
    //Serial.print(temp);Serial.print(",");
    //Serial.print(ax/16384.); Serial.print(",");
    //Serial.print(ay/16384.); Serial.print(",");
    //Serial.print(az/16384.); Serial.print(",");
    if (zero_detect){
        Serial.print(gx/131.072); Serial.print(",");
        Serial.print(gy/131.072); Serial.print(",");
        Serial.print(gz/131.072); Serial.print(",");

        Serial.println();
    }

    //Serial.print(zero_detect); Serial.print(",");
	//Serial.print(XnegMD); Serial.print(",");
	//Serial.println(XposMD);
	
    // display tab-separated accel/gyro x/y/z values
    /*
    Serial.print("a/g:\t");
    Serial.print(ax/16384.); Serial.print("\t");
    Serial.print(ay/16384.); Serial.print("\t");
    Serial.print(az/16384.); Serial.print("\t");
    Serial.print(gx/131.072); Serial.print("\t");
    Serial.print(gy/131.072); Serial.print("\t");
    Serial.println(gz/131.072);
	
    Serial.print("DieTemp:\t");Serial.println(temp);
	
    Serial.print("ZeroMotion(97):\t");	
    Serial.print(zero_detect); Serial.print("\t");
    Serial.print("Count: \t");Serial.print(count); Serial.print("\t");
    Serial.print(XnegMD); Serial.print("\t");
    Serial.print(XposMD); Serial.print("\t");
    Serial.print(YnegMD); Serial.print("\t");
    Serial.print(YposMD); Serial.print("\t");
    Serial.print(ZnegMD); Serial.print("\t");
    Serial.println(ZposMD);
    */	

	
    delay(80);
	
    // blink LED to indicate activity
    blinkState = !blinkState;
    digitalWrite(LED_PIN, blinkState);
}